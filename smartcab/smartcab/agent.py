import random
from random import randint
import math
from environment import Agent, Environment
from planner import RoutePlanner
from simulator import Simulator
import numpy as np

class LearningAgent(Agent):
    """ An agent that learns to drive in the Smartcab world.
        This is the object you will be modifying. """ 

    def __init__(self, env, learning=True, epsilon=1.0, alpha=0.5):
        super(LearningAgent, self).__init__(env)     # Set the agent in the evironment 
        self.planner = RoutePlanner(self.env, self)  # Create a route planner
        self.valid_actions = self.env.valid_actions  # The set of valid actions

        # Set parameters of the learning agent
        self.learning = learning # Whether the agent is expected to learn
        self.Q = dict()          # Create a Q-table which will be a dictionary of tuples
        self.epsilon = epsilon   # Random exploration factor
        self.alpha = alpha       # Learning factor

        ###########
        ## TO DO ##
        ###########
        # Set any additional class parameters as needed
        self.total_rewards = 0 
        self.sum_penalties = 0 
        self.successes = []
        self.success = 0
        self.time = 0 
        self.life = 1;
        self.failure_time=0;
        self.life =self.life+1
        self.learn_time=8
        self.prev_state = []
        self.trial_num = 0

    def reset(self, destination=None, testing=False):
        """ The reset function is called at the beginning of each trial.
            'testing' is set to True if testing trials are being used
            once training trials have completed. """

        # Select the destination as the new location to route to
        self.planner.route_to(destination)
        
        ########### 
        ## TO DO ##
        ###########
        # Update epsilon using a decay function of your choice
        # Update additional class parameters as needed
        # If 'testing' is True, set epsilon and alpha to 0
        
        if testing is True:
            self.epsilon = 0 
            self.alpha = 0
        else:
            self.epsilon = math.exp(-0.05*self.trial_num)
            self.trial_num = self.trial_num + 1

            if self.alpha > 0.2:
                self.alpha = self.alpha-0.04

        self.total_rewards = 0 
        # TODO: Prepare for a new trip; reset any variables here, if required
        self.previous_action = None
        return None

    def build_state(self):
        """ The build_state function is called when the agent requests data from the 
            environment. The next waypoint, the intersection inputs, and the deadline 
            are all features available to the agent. """

        # Collect data about the environment
        waypoint = self.planner.next_waypoint() # The next waypoint 
        inputs = self.env.sense(self)           # Visual input - intersection light and traffic
        deadline = self.env.get_deadline(self)  # Remaining deadline

        ########### 
        ## TO DO ##
        ###########
        # Set 'state' as a tuple of relevant data for the agent
        # When learning, check if the state is in the Q-table
        #   If it is not, create a dictionary in the Q-table for the current 'state'
        #   For each action, set the Q-value for the state-action pair to 0
        if deadline == 0 and self.life>=self.learn_time:
            self.failure_time+=1


        state = (waypoint, inputs['light'], inputs['oncoming'], inputs['left'])

        return state


    def get_maxQ(self, state):
        """ The get_max_Q function is called when the agent is asked to find the
            maximum Q-value of all actions based on the 'state' the smartcab is in. """

        ########### 
        ## TO DO ##
        ###########
        # Calculate the maximum Q-value of all actions for a given state

        if self.learning:
            for action in self.env.valid_actions:
                value = self.get(state, action)
                if value > maxQ: maxQ = value
   
        return maxQ 


    def createQ(self, state):
        """ The createQ function is called when a state is generated by the agent. """

        ########### 
        ## TO DO ##
        ###########
        # When learning, check if the 'state' is not in the Q-table
        # If it is not, create a new dictionary for that state
        #   Then, for each action available, set the initial Q-value to 0.0
        if self.learning is True:
            if not (state in self.Q.keys()):
                self.Q[state] = {None: 0.0, 'forward':0.0, 'left':0.0, 'right':0.0}
        return


    def choose_action(self, state):
        """ The choose_action function is called when the agent is asked to choose
            which action to take, based on the 'state' the smartcab is in. """

        # Set the agent state and default action
        self.state = state
        self.next_waypoint = self.planner.next_waypoint()
        Qtable = self.Q


        ########### 
        ## TO DO ##
        ###########
        # When not learning, choose a random action
        # When learning, choose a random action with 'epsilon' probability
        #   Otherwise, choose an action with the highest Q-value for the current state
 
        if self.learning:
            rand = randint(0, 99)
            if(rand < self.epsilon*100):
                action  = self.valid_actions[randint(0, 3)]
            else:
                highest = max(self.Q[state].values()) #Get highest value
                maximum_keys =  [k for k,v in self.Q[state].items() if v == highest] #get all keys with the highest value
                random_max = randint(0,len(maximum_keys)-1) #random int to choose a key with highest value
                action = maximum_keys[random_max] #choose random action
                # action  = max(self.Q[state], key=self.Q[state].get) #get action with maximum value
        else:
            action  = self.valid_actions[randint(0, 3)]
        return action


    def learn(self, state, action, reward):
        """ The learn function is called after the agent completes an action and
            receives an award. This function does not consider future rewards 
            when conducting learning. """

        ########### 
        ## TO DO ##
        ###########
        # When learning, implement the value iteration update rule
        #   Use only the learning rate 'alpha' (do not use the discount factor 'gamma')
        Qtable = self.Q
        self.Q[state][action] = \
            (1-self.alpha) * self.Q[state][action] + self.alpha * (reward)
        return 


    def update(self):
        """ The update function is called when a time step is completed in the 
            environment for a given trial. This function will build the agent
            state, choose an action, receive a reward, and learn if enabled. """
        state = self.build_state()          # Get current state
        self.createQ(state)                 # Create 'state' in Q-table
        action = self.choose_action(state)  # Choose an action
        reward = self.env.act(self, action) # Receive a reward
        self.learn(state, action, reward)   # Q-learn

        return 
        
    def statistics(self):
        if self.current_trial == 0:
            success_rate = 0
        else:
            success_rate = "{}/{} = %{}".format(self.successes, self.current_trial, (round(float(self.successes)/float(self.current_trial), 3))*100)
            penalty_ratio = "{}/{} = %{}".format(self.sum_penalties, self.num_moves, (round(float(self.sum_penalties)/float(self.num_moves),4))*100)
            text = "\nSuccess Rate: %s, Penalty Ratio %s \n" % (successes,penalty_ratio)

            suc = str(success_rate)
            pen = str(penalty_ratio)
            tri = str(self.current_trial)

        with open("/Users/jayden/Desktop/10.12/MLE/smartcab/smartcab/sim-results/q_learn.csv","w") as myfile:
            myfile.write("Trial: "+ tri + " " + " Success Rate: "+ suc + " " + "Penalty Rate: "+ pen + "\n")
        return text



def run():
    """ Driving function for running the simulation. 
        Press ESC to close the simulation, or [SPACE] to pause the simulation. """

    ##############
    # Create the environment
    # Flags:
    #   verbose     - set to True to display additional output from the simulation
    #   num_dummies - discrete number of dummy agents in the environment, default is 100
    #   grid_size   - discrete number of intersections (columns, rows), default is (8, 6)
    env = Environment()
    
    ##############
    # Create the driving agent
    # Flags:
    #   learning   - set to True to force the driving agent to use Q-learning
    #    * epsilon - continuous value for the exploration factor, default is 1
    #    * alpha   - continuous value for the learning rate, default is 0.5
    agent = env.create_agent(LearningAgent, learning = True, epsilon = 0.8, alpha = 0.95)
    
    ##############
    # Follow the driving agent
    # Flags:
    #   enforce_deadline - set to True to enforce a deadline metric
    env.set_primary_agent(agent,enforce_deadline=True)

    ##############
    # Create the simulation
    # Flags:
    #   update_delay - continuous time (in seconds) between actions, default is 2.0 seconds
    #   display      - set to False to disable the GUI if PyGame is enabled
    #   log_metrics  - set to True to log trial and simulation results to /logs
    #   optimized    - set to True to change the default log file name
    sim = Simulator(env, update_delay=0.01,log_metrics = True,optimized= True)
    
    ##############
    # Run the simulator
    # Flags:
    #   tolerance  - epsilon tolerance before beginning testing, default is 0.05 
    #   n_test     - discrete number of testing trials to perform, default is 0
    sim.run(n_test=20, tolerance = 0.02)

if __name__ == '__main__':
    run()
